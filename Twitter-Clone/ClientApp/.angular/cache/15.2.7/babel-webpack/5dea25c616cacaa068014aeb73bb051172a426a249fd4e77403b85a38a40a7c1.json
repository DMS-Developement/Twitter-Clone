{
  "ast": null,
  "code": "import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { animate, state, style, transition, trigger } from \"@angular/animations\";\nimport { Validators } from \"@angular/forms\";\nimport { catchError, tap } from \"rxjs\";\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, loginFlag, http, router, CurrentuserService) {\n    this.formBuilder = formBuilder;\n    this.loginFlag = loginFlag;\n    this.http = http;\n    this.router = router;\n    this.showLoginForm = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      'username': ['', Validators.required],\n      'password': ['', [Validators.required, Validators.minLength(6)]]\n    });\n    this.loginFlag.currentLoginFlag.subscribe(flag => this.showLoginForm = flag);\n  }\n  onSubmit() {\n    const user = {\n      username: '',\n      password: ''\n    };\n    if (this.loginForm.valid) {\n      user.username = this.loginForm.get('username')?.value;\n      user.password = this.loginForm.get('password')?.value;\n    }\n    this.http.post('https://localhost:7282/api/Auth/login', user).pipe(tap(response => {\n      console.log(response);\n      this.closeLoginForm();\n      this.router.navigate(['']);\n    }), catchError(error => {\n      const loginErrorMessage = \"Invalid username or password.\";\n      window.alert(loginErrorMessage);\n      return error;\n    })).subscribe();\n  }\n  closeLoginForm() {\n    this.loginFlag.changeLoginFlag(false);\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  animations: [trigger('fadeIn', [state('void', style({\n    opacity: 0\n  })), transition('void <=> *', animate(100))])]\n})], LoginComponent);\nexport { LoginComponent };",
  "map": {
    "version": 3,
    "mappings": ";AAAA,SAAQA,SAAS,QAAe,eAAe;AAC/C,SAAQC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEC,OAAO,QAAO,qBAAqB;AAC9E,SAAgCC,UAAU,QAAO,gBAAgB;AAEjE,SAAQC,UAAU,EAAEC,GAAG,QAAO,MAAM;AAkB7B,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAMzBC,YAAoBC,WAAwB,EAAUC,SAAwC,EAAUC,IAAgB,EAAUC,MAAc,EAAEC,kBAAmB;IAAjJ,gBAAW,GAAXJ,WAAW;IAAuB,cAAS,GAATC,SAAS;IAAyC,SAAI,GAAJC,IAAI;IAAsB,WAAM,GAANC,MAAM;IAFxI,kBAAa,GAAY,KAAK;EAG9B;EAEAE,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtC,UAAU,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACa,QAAQ,CAAC;MACrC,UAAU,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC;KAChE,CAAC;IAEF,IAAI,CAACR,SAAS,CAACS,gBAAgB,CAACC,SAAS,CAACC,IAAI,IAAI,IAAI,CAACC,aAAa,GAAGD,IAAI,CAAC;EAC9E;EAEAE,QAAQ;IAEN,MAAMC,IAAI,GAAG;MACXC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;KACX;IAED,IAAI,IAAI,CAACX,SAAS,CAACY,KAAK,EAAE;MACxBH,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACV,SAAS,CAACa,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;MACrDL,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACX,SAAS,CAACa,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;;IAGvD,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAC,uCAAuC,EAAEN,IAAI,CAAC,CAACO,IAAI,CAC9DzB,GAAG,CAAC0B,QAAQ,IAAG;MACbC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAI,CAACG,cAAc,EAAE;MACrB,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,EACF/B,UAAU,CAACgC,KAAK,IAAG;MACjB,MAAMC,iBAAiB,GAAG,+BAA+B;MACzDC,MAAM,CAACC,KAAK,CAACF,iBAAiB,CAAC;MAC/B,OAAOD,KAAK;IACd,CAAC,CAAC,CACL,CAACjB,SAAS,EAAE;EACf;EAEAe,cAAc;IACZ,IAAI,CAACzB,SAAS,CAAC+B,eAAe,CAAC,KAAK,CAAC;EACvC;CACD;AA/CYlC,cAAc,eAb1BT,SAAS,CAAC;EACT4C,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB,CAAC;EACpCC,UAAU,EAAE,CACV1C,OAAO,CAAC,QAAQ,EAAE,CAChBH,KAAK,CAAC,MAAM,EAAEC,KAAK,CAAC;IAClB6C,OAAO,EAAE;GACV,CAAC,CAAC,EACH5C,UAAU,CAAC,YAAY,EAAEH,OAAO,CAAC,GAAG,CAAC,CAAC,CACvC,CAAC;CAEL,CAAC,GACWQ,cAAc,CA+C1B;SA/CYA,cAAc",
    "names": [
      "Component",
      "animate",
      "state",
      "style",
      "transition",
      "trigger",
      "Validators",
      "catchError",
      "tap",
      "LoginComponent",
      "constructor",
      "formBuilder",
      "loginFlag",
      "http",
      "router",
      "CurrentuserService",
      "ngOnInit",
      "loginForm",
      "group",
      "required",
      "minLength",
      "currentLoginFlag",
      "subscribe",
      "flag",
      "showLoginForm",
      "onSubmit",
      "user",
      "username",
      "password",
      "valid",
      "get",
      "value",
      "post",
      "pipe",
      "response",
      "console",
      "log",
      "closeLoginForm",
      "navigate",
      "error",
      "loginErrorMessage",
      "window",
      "alert",
      "changeLoginFlag",
      "selector",
      "templateUrl",
      "styleUrls",
      "animations",
      "opacity"
    ],
    "sourceRoot": "",
    "sources": [
      "/Users/davidshimenko/RiderProjects/Twitter Clone/Twitter-Clone/Twitter-Clone/ClientApp/src/app/auth/login/login.component.ts"
    ],
    "sourcesContent": [
      "import {Component, OnInit} from '@angular/core';\nimport {animate, state, style, transition, trigger} from \"@angular/animations\";\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {LoginRegisterModalFlagService} from \"../../login-register-modal-flag.service\";\nimport {catchError, tap} from \"rxjs\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Router} from \"@angular/router\";\nimport { CurrentuserService } from 'src/app/currentuser.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  animations: [\n    trigger('fadeIn', [\n      state('void', style({\n        opacity: 0\n      })),\n      transition('void <=> *', animate(100)),\n    ])\n  ]\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm!: FormGroup;\n\n  showLoginForm: boolean = false\n\n  constructor(private formBuilder: FormBuilder, private loginFlag: LoginRegisterModalFlagService, private http: HttpClient, private router: Router, CurrentuserService: ) {\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      'username': ['', Validators.required],\n      'password': ['', [Validators.required, Validators.minLength(6)]]\n    });\n\n    this.loginFlag.currentLoginFlag.subscribe(flag => this.showLoginForm = flag);\n  }\n\n  onSubmit() {\n\n    const user = {\n      username: '',\n      password: ''\n    };\n\n    if (this.loginForm.valid) {\n      user.username = this.loginForm.get('username')?.value;\n      user.password = this.loginForm.get('password')?.value;\n    }\n\n    this.http.post('https://localhost:7282/api/Auth/login', user).pipe(\n        tap(response => {\n          console.log(response);\n          this.closeLoginForm();\n          this.router.navigate(['']);\n        }),\n        catchError(error => {\n          const loginErrorMessage = \"Invalid username or password.\"\n          window.alert(loginErrorMessage);\n          return error;\n        }),\n    ).subscribe();\n  }\n\n  closeLoginForm() {\n    this.loginFlag.changeLoginFlag(false);\n  }\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}